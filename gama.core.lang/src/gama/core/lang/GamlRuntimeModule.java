/*
 * generated by Xtext 2.25.0
 */
package gama.core.lang;

import org.eclipse.xtext.linking.ILinkingDiagnosticMessageProvider;
import org.eclipse.xtext.linking.ILinkingService;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.service.SingletonBinding;
import org.eclipse.xtext.validation.IResourceValidator;

import com.google.inject.Binder;

import gama.core.lang.linking.GamlLinkingErrorMessageProvider;
import gama.core.lang.linking.GamlLinkingService;
import gama.core.lang.naming.GamlQualifiedNameProvider;
import gama.core.lang.scoping.GamlGlobalScopeProvider;
import gama.core.lang.resource.GamlResource;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class GamlRuntimeModule extends AbstractGamlRuntimeModule {
	private static boolean initialized;

//	public static void staticInitialize() {
//		if (!initialized) {
//			GamlExpressionFactory.registerParserProvider(() -> new GamlExpressionCompiler());
//			GAML.registerInfoProvider(GamlResourceInfoProvider.INSTANCE);
//			GAML.registerGamlEcoreUtils(EGaml.getInstance());
//			initialized = true;
//
//		}
//	}

	@Override
	@SingletonBinding ()
	public Class<? extends org.eclipse.xtext.scoping.IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return GamlGlobalScopeProvider.class;
	}

	@Override
	public Class<? extends ILinkingService> bindILinkingService() {
		return GamlLinkingService.class;
	}

	public Class<? extends ILinkingDiagnosticMessageProvider.Extended> bindILinkingDiagnosticMessageProvider() {
		return GamlLinkingErrorMessageProvider.class;
	}

	@Override
	public Class<? extends XtextResource> bindXtextResource() {
		return GamlResource.class;
	}

//	@Override
//	public void configure(final Binder binder) {
//		super.configure(binder);
//		staticInitialize();
//		// binder.bind(ExpressionDescriptionBuilder.class);
//		// binder.bind(IDocManager.class).to(GamlResourceDocumenter.class);
//		// binder.bind(GamlSyntacticConverter.class);
//		binder.bind(IDefaultResourceDescriptionStrategy.class).to(GamlResourceDescriptionStrategy.class);
//		binder.bind(IQualifiedNameConverter.class).to(GamlNameConverter.class);
//		binder.bind(IResourceDescription.Manager.class).to(GamlResourceDescriptionManager.class);
//		// binder.bind(IOutputConfigurationProvider.class).to(GamlOutputConfigurationProvider.class);
//		binder.bind(IResourceValidator.class).to(GamlResourceValidator.class);
//		binder.bind(ErrorToDiagnoticTranslator.class);
//	}
	
	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return GamlQualifiedNameProvider.class;
	}
}
